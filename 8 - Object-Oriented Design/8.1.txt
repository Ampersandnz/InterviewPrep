Design the data structures for a generic deck of cards. Explain how you would
subclass the data structures to implement blackjack.

I would begin with a Deck class, representing a deck of cards. By default it would be initialised containing a single Stack of the standard 52 Card objects, with a boolean option for including jokers, and another optional integer argument to specify a multiple of the default deck for games that require more cards. The Stack would be a custom implementation with additional functions to shuffle the deck and to draw a card at random, or from a specific position. Functions would be provided to draw cards from, and place them into, the deck.

Each Card object would have a Suit and a Value, both Enums.

A second Deck object would be used as a discard pile in most games.

I am currently unsure as to how to implement players' hands. Potentially another Deck object could be used, but this may be conceptually confusing, so I think I'd favour a CardSet Interface that was implemented by both Deck and Hand, that enforced Count, Add, and Draw functions.

This should suffice as a base structure, that could be extended to support specific rules for each game implementation.

For Blackjack, I would begin by 