There is a building of 100 floors. If an egg drops from the Nth floor or above, it
will break. If it's dropped from any floor below, it will not break. You're given two
eggs. Find N, while minimizing the number of drops for the worst case.

While I've seen this problem answered online and I know a better approach exists, I can't figure it out myself so I'd use a simple binary search.
Drop egg # 1 from the 50th floor, egg #2 from the 25th or 75th (depending on the result of the first drop), and continue halving the search space until an answer of sufficient accuracy is found.

The question itself is a little confusing - it seems to want to minimise egg usage while finding N, but also states that only two eggs are provided.

UPDATE: I completely forgot that an unbroken egg can be used again.

Having looked up the correct solution, it makes sense:

The simplest, but most time consuming, approach would be to drop the first egg from every floor, bottom up, until it breaks.
However, we want to minimise drops so we go up in chunks of floors until egg #1 breaks, followed by testing every floor in the last block individually with egg #2.

The total number of drops in the worst case (floor 100 and no other breaks eggs), needs to be minimised. To do this, we take an initial chunk size x, and decrease it by 1 every drop until we reach floor 100.
Therefore x + (x - 1) + (x - 2)... = 100
Which is equal to (x(x + 1))/2 = 100
x = 14, decreasing by 1 after each successful drop, for a worst case of 14 drops.